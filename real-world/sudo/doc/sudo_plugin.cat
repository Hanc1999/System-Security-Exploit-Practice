SUDO_PLUGIN(1m)              MAINTENANCE COMMANDS              SUDO_PLUGIN(1m)



NNAAMMEE
       sudo_plugin - Sudo Plugin API

DDEESSCCRRIIPPTTIIOONN
       Starting with version 1.8, ssuuddoo supports a plugin API for policy and
       session logging.  By default, the _s_u_d_o_e_r_s policy plugin and an
       associated I/O logging plugin are used.  Via the plugin API, ssuuddoo can
       be configured to use alternate policy and/or I/O logging plugins
       provided by third parties.  The plugins to be used are specified via
       the _/_e_t_c_/_s_u_d_o_._c_o_n_f file.

       The API is versioned with a major and minor number.  The minor version
       number is incremented when additions are made.  The major number is
       incremented when incompatible changes are made.  A plugin should be
       check the version passed to it and make sure that the major version
       matches.

       The plugin API is defined by the sudo_plugin.h header file.

   TThhee ssuuddoo..ccoonnff FFiillee
       The _/_e_t_c_/_s_u_d_o_._c_o_n_f file contains plugin configuration directives.
       Currently, the only supported keyword is the Plugin directive, which
       causes a plugin plugin to be loaded.

       A Plugin line consists of the Plugin keyword, followed by the
       _s_y_m_b_o_l___n_a_m_e and the _p_a_t_h to the shared object containing the plugin.
       The _s_y_m_b_o_l___n_a_m_e is the name of the struct policy_plugin or struct
       io_plugin in the plugin shared object.  The _p_a_t_h may be fully qualified
       or relative.  If not fully qualified it is relative to the
       _/_u_s_r_/_l_o_c_a_l_/_l_i_b_e_x_e_c directory.  Any additional parameters after the _p_a_t_h
       are ignored.  Lines that don't begin with Plugin or Path are silently
       ignored.

       The same shared object may contain multiple plugins, each with a
       different symbol name.  The shared object file must be owned by uid 0
       and only writable by its owner.  Because of ambiguities that arise from
       composite policies, only a single policy plugin may be specified.  This
       limitation does not apply to I/O plugins.

        #
        # Default /etc/sudo.conf file
        #
        # Format:
        #   Plugin plugin_name plugin_path
        #   Path askpass /path/to/askpass
        #
        # The plugin_path is relative to /usr/local/libexec unless
        #   fully qualified.
        # The plugin_name corresponds to a global symbol in the plugin
        #   that contains the plugin interface structure.
        #
        Plugin sudoers_policy sudoers.so
        Plugin sudoers_io sudoers.so

   PPoolliiccyy PPlluuggiinn AAPPII
       A policy plugin must declare and populate a policy_plugin struct in the
       global scope.  This structure contains pointers to the functions that
       implement the ssuuddoo policy checks.  The name of the symbol should be
       specified in _/_e_t_c_/_s_u_d_o_._c_o_n_f along with a path to the plugin so that
       ssuuddoo can load it.

        struct policy_plugin {
        #define SUDO_POLICY_PLUGIN     1
            unsigned int type; /* always SUDO_POLICY_PLUGIN */
            unsigned int version; /* always SUDO_API_VERSION */
            int (*open)(unsigned int version, sudo_conv_t conversation,
                        sudo_printf_t plugin_printf, char * const settings[],
                        char * const user_info[], char * const user_env[]);
            void (*close)(int exit_status, int error);
            int (*show_version)(int verbose);
            int (*check_policy)(int argc, char * const argv[],
                                char *env_add[], char **command_info[],
                                char **argv_out[], char **user_env_out[]);
            int (*list)(int argc, char * const argv[], int verbose,
                        const char *list_user);
            int (*validate)(void);
            void (*invalidate)(int remove);
            int (*init_session)(struct passwd *pwd);
        };

       The policy_plugin struct has the following fields:

       type
           The type field should always be set to SUDO_POLICY_PLUGIN.

       version
           The version field should be set to SUDO_API_VERSION.

           This allows ssuuddoo to determine the API version the plugin was built
           against.

       open
            int (*open)(unsigned int version, sudo_conv_t conversation,
                        sudo_printf_t plugin_printf, char * const settings[],
                        char * const user_info[], char * const user_env[]);

           Returns 1 on success, 0 on failure, -1 if a general error occurred,
           or -2 if there was a usage error.  In the latter case, ssuuddoo will
           print a usage message before it exits.  If an error occurs, the
           plugin may optionally call the conversation or plugin_printf
           function with SUDO_CONF_ERROR_MSG to present additional error
           information to the user.

           The function arguments are as follows:

           version
               The version passed in by ssuuddoo allows the plugin to determine
               the major and minor version number of the plugin API supported
               by ssuuddoo.

           conversation
               A pointer to the conversation function that can be used by the
               plugin to interact with the user (see below).  Returns 0 on
               success and -1 on failure.

           plugin_printf
               A pointer to a printf-style function that may be used to
               display informational or error messages (see below).  Returns
               the number of characters printed on success and -1 on failure.

           settings
               A vector of user-supplied ssuuddoo settings in the form of
               "name=value" strings.  The vector is terminated by a NULL
               pointer.  These settings correspond to flags the user specified
               when running ssuuddoo.  As such, they will only be present when the
               corresponding flag has been specified on the command line.

               When parsing _s_e_t_t_i_n_g_s, the plugin should split on the ffiirrsstt
               equal sign ('=') since the _n_a_m_e field will never include one
               itself but the _v_a_l_u_e might.

               debug_level=number
                   A numeric debug level, from 1-9, if specified via the -D
                   flag.

               runas_user=string
                   The user name or uid to to run the command as, if specified
                   via the -u flag.

               runas_group=string
                   The group name or gid to to run the command as, if
                   specified via the -g flag.

               prompt=string
                   The prompt to use when requesting a password, if specified
                   via the -p flag.

               set_home=bool
                   Set to true if the user specified the -H flag.  If true,
                   set the HOME environment variable to the target user's home
                   directory.

               preserve_environment=bool
                   Set to true if the user specified the -E flag, indicating
                   that the user wishes to preserve the environment.

               run_shell=bool
                   Set to true if the user specified the -s flag, indicating
                   that the user wishes to run a shell.

               login_shell=bool
                   Set to true if the user specified the -i flag, indicating
                   that the user wishes to run a login shell.

               implied_shell=bool
                   If the user does not specify a program on the command line,
                   ssuuddoo will pass the plugin the path to the user's shell and
                   set _i_m_p_l_i_e_d___s_h_e_l_l to true.  This allows ssuuddoo with no
                   arguments to be used similarly to _s_u(1).  If the plugin
                   does not to support this usage, it may return a value of -2
                   from the check_policy function, which will cause ssuuddoo to
                   print a usage message and exit.

               preserve_groups=bool
                   Set to true if the user specified the -P flag, indicating
                   that the user wishes to preserve the group vector instead
                   of setting it based on the runas user.

               ignore_ticket=bool
                   Set to true if the user specified the -k flag along with a
                   command, indicating that the user wishes to ignore any
                   cached authentication credentials.

               noninteractive=bool
                   Set to true if the user specified the -n flag, indicating
                   that ssuuddoo should operate in non-interactive mode.  The
                   plugin may reject a command run in non-interactive mode if
                   user interaction is required.

               login_class=string
                   BSD login class to use when setting resource limits and
                   nice value, if specified by the -c flag.

               selinux_role=string
                   SELinux role to use when executing the command, if
                   specified by the -r flag.

               selinux_type=string
                   SELinux type to use when executing the command, if
                   specified by the -t flag.

               bsdauth_type=string
                   Authentication type, if specified by the -a flag, to use on
                   systems where BSD authentication is supported.

               network_addrs=list
                   A space-separated list of IP network addresses and netmasks
                   in the form "addr/netmask", e.g.
                   "192.168.1.2/255.255.255.0".  The address and netmask pairs
                   may be either IPv4 or IPv6, depending on what the operating
                   system supports.  If the address contains a colon (':'), it
                   is an IPv6 address, else it is IPv4.

               progname=string
                   The command name that sudo was run as, typically "sudo" or
                   "sudoedit".

               sudoedit=bool
                   Set to true when the -e flag is is specified or if invoked
                   as ssuuddooeeddiitt.  The plugin shall substitute an editor into
                   _a_r_g_v in the _c_h_e_c_k___p_o_l_i_c_y function or return -2 with a usage
                   error if the plugin does not support _s_u_d_o_e_d_i_t.  For more
                   information, see the _c_h_e_c_k___p_o_l_i_c_y section.

               closefrom=number
                   If specified, the user has requested via the -C flag that
                   ssuuddoo close all files descriptors with a value of _n_u_m_b_e_r or
                   higher.  The plugin may optionally pass this, or another
                   value, back in the _c_o_m_m_a_n_d___i_n_f_o list.

               Additional settings may be added in the future so the plugin
               should silently ignore settings that it does not recognize.

           user_info
               A vector of information about the user running the command in
               the form of "name=value" strings.  The vector is terminated by
               a NULL pointer.

               When parsing _u_s_e_r___i_n_f_o, the plugin should split on the ffiirrsstt
               equal sign ('=') since the _n_a_m_e field will never include one
               itself but the _v_a_l_u_e might.

               user=string
                   The name of the user invoking ssuuddoo.

               uid=uid_t
                   The real user ID of the user invoking ssuuddoo.

               gid=gid_t
                   The real group ID of the user invoking ssuuddoo.

               groups=list
                   The user's supplementary group list formatted as a string
                   of comma-separated group IDs.

               cwd=string
                   The user's current working directory.

               tty=string
                   The path to the user's terminal device.  If the user has no
                   terminal device associated with the session, the value will
                   be empty, as in tty=.

               host=string
                   The local machine's hostname as returned by the
                   gethostname() system call.

               lines=int
                   The number of lines the user's terminal supports.  If there
                   is no terminal device available, a default value of 24 is
                   used.

               cols=int
                   The number of columns the user's terminal supports.  If
                   there is no terminal device available, a default value of
                   80 is used.

           user_env
               The user's environment in the form of a NULL-terminated vector
               of "name=value" strings.

               When parsing _u_s_e_r___e_n_v, the plugin should split on the ffiirrsstt
               equal sign ('=') since the _n_a_m_e field will never include one
               itself but the _v_a_l_u_e might.

       close
            void (*close)(int exit_status, int error);

           The close function is called when the command being run by ssuuddoo
           finishes.

           The function arguments are as follows:

           exit_status
               The command's exit status, as returned by the _w_a_i_t(2) system
               call.  The value of exit_status is undefined if error is non-
               zero.

           error
               If the command could not be executed, this is set to the value
               of errno set by the _e_x_e_c_v_e(2) system call.  The plugin is
               responsible for displaying error information via the
               conversation or plugin_printf function.  If the command was
               successfully executed, the value of error is 0.

       show_version
            int (*show_version)(int verbose);

           The show_version function is called by ssuuddoo when the user specifies
           the -V option.  The plugin may display its version information to
           the user via the conversation or plugin_printf function using
           SUDO_CONV_INFO_MSG.  If the user requests detailed version
           information, the verbose flag will be set.

       check_policy
            int (*check_policy)(int argc, char * const argv[]
                                char *env_add[], char **command_info[],
                                char **argv_out[], char **user_env_out[]);

           The _c_h_e_c_k___p_o_l_i_c_y function is called by ssuuddoo to determine whether
           the user is allowed to run the specified commands.

           If the _s_u_d_o_e_d_i_t option was enabled in the _s_e_t_t_i_n_g_s array passed to
           the _o_p_e_n function, the user has requested _s_u_d_o_e_d_i_t mode.  _s_u_d_o_e_d_i_t
           is a mechanism for editing one or more files where an editor is run
           with the user's credentials instead of with elevated privileges.
           ssuuddoo achieves this by creating user-writable temporary copies of
           the files to be edited and then overwriting the originals with the
           temporary copies after editing is complete.  If the plugin supports
           ssuuddooeeddiitt, it should choose the editor to be used, potentially from
           a variable in the user's environment, such as EDITOR, and include
           it in _a_r_g_v___o_u_t (note that environment variables may include command
           line flags).  The files to be edited should be copied from _a_r_g_v
           into _a_r_g_v___o_u_t, separated from the editor and its arguments by a
           "--" element.  The "--" will be removed by ssuuddoo before the editor
           is executed.  The plugin should also set _s_u_d_o_e_d_i_t_=_t_r_u_e in the
           _c_o_m_m_a_n_d___i_n_f_o list.

           The _c_h_e_c_k___p_o_l_i_c_y function returns 1 if the command is allowed, 0 if
           not allowed, -1 for a general error, or -2 for a usage error or if
           ssuuddooeeddiitt was specified but is unsupported by the plugin.  In the
           latter case, ssuuddoo will print a usage message before it exits.  If
           an error occurs, the plugin may optionally call the conversation or
           plugin_printf function with SUDO_CONF_ERROR_MSG to present
           additional error information to the user.

           The function arguments are as follows:

           argc
               The number of elements in _a_r_g_v, not counting the final NULL
               pointer.

           argv
               The argument vector describing the command the user wishes to
               run, in the same form as what would be passed to the _e_x_e_c_v_e_(_)
               system call.  The vector is terminated by a NULL pointer.

           env_add
               Additional environment variables specified by the user on the
               command line in the form of a NULL-terminated vector of
               "name=value" strings.  The plugin may reject the command if one
               or more variables are not allowed to be set, or it may silently
               ignore such variables.

               When parsing _e_n_v___a_d_d, the plugin should split on the ffiirrsstt
               equal sign ('=') since the _n_a_m_e field will never include one
               itself but the _v_a_l_u_e might.

           command_info
               Information about the command being run in the form of
               "name=value" strings.  These values are used by ssuuddoo to set the
               execution environment when running a command.  The plugin is
               responsible for creating and populating the vector, which must
               be terminated with a NULL pointer.  The following values are
               recognized by ssuuddoo:

               command=string
                   Fully qualified path to the command to be executed.

               runas_uid=uid
                   User ID to run the command as.

               runas_euid=uid
                   Effective user ID to run the command as.  If not specified,
                   the value of _r_u_n_a_s___u_i_d is used.

               runas_gid=gid
                   Group ID to run the command as.

               runas_egid=gid
                   Effective group ID to run the command as.  If not
                   specified, the value of _r_u_n_a_s___g_i_d is used.

               runas_groups=list
                   The supplementary group vector to use for the command in
                   the form of a comma-separated list of group IDs.  If
                   _p_r_e_s_e_r_v_e___g_r_o_u_p_s is set, this option is ignored.

               login_class=string
                   BSD login class to use when setting resource limits and
                   nice value (optional).  This option is only set on systems
                   that support login classes.

               preserve_groups=bool
                   If set, ssuuddoo will preserve the user's group vector instead
                   of initializing the group vector based on runas_user.

               cwd=string
                   The current working directory to change to when executing
                   the command.

               noexec=bool
                   If set, prevent the command from executing other programs.

               chroot=string
                   The root directory to use when running the command.

               nice=int
                   Nice value (priority) to use when executing the command.
                   The nice value, if specified, overrides the priority
                   associated with the _l_o_g_i_n___c_l_a_s_s on BSD systems.

               umask=octal
                   The file creation mask to use when executing the command.

               selinux_role=string
                   SELinux role to use when executing the command.

               selinux_type=string
                   SELinux type to use when executing the command.

               timeout=int
                   Command timeout.  If non-zero then when the timeout expires
                   the command will be killed.

               sudoedit=bool
                   Set to true when in _s_u_d_o_e_d_i_t mode.  The plugin may enable
                   _s_u_d_o_e_d_i_t mode even if ssuuddoo was not invoked as ssuuddooeeddiitt.
                   This allows the plugin to perform command substitution and
                   transparently enable _s_u_d_o_e_d_i_t when the user attempts to run
                   an editor.

               closefrom=number
                   If specified, ssuuddoo will close all files descriptors with a
                   value of _n_u_m_b_e_r or higher.

               iolog_compress=bool
                   Set to true if the I/O logging plugins, if any, should
                   compress the log data.  This is a hint to the I/O logging
                   plugin which may choose to ignore it.

               iolog_path=string
                   Fully qualified path to the file or directory in which I/O
                   log is to be stored.  This is a hint to the I/O logging
                   plugin which may choose to ignore it.  If no I/O logging
                   plugin is loaded, this setting has no effect.

               iolog_stdin=bool
                   Set to true if the I/O logging plugins, if any, should log
                   the standard input if it is not connected to a terminal
                   device.  This is a hint to the I/O logging plugin which may
                   choose to ignore it.

               iolog_stdout=bool
                   Set to true if the I/O logging plugins, if any, should log
                   the standard output if it is not connected to a terminal
                   device.  This is a hint to the I/O logging plugin which may
                   choose to ignore it.

               iolog_stderr=bool
                   Set to true if the I/O logging plugins, if any, should log
                   the standard error if it is not connected to a terminal
                   device.  This is a hint to the I/O logging plugin which may
                   choose to ignore it.

               iolog_ttyin=bool
                   Set to true if the I/O logging plugins, if any, should log
                   all terminal input.  This only includes input typed by the
                   user and not from a pipe or redirected from a file.  This
                   is a hint to the I/O logging plugin which may choose to
                   ignore it.

               iolog_ttyout=bool
                   Set to true if the I/O logging plugins, if any, should log
                   all terminal output.  This only includes output to the
                   screen, not output to a pipe or file.  This is a hint to
                   the I/O logging plugin which may choose to ignore it.

               use_pty=bool
                   Allocate a pseudo-tty to run the command in, regardless of
                   whether or not I/O logging is in use.  By default, ssuuddoo
                   will only run the command in a pty when an I/O log plugin
                   is loaded.

               set_utmp=bool
                   Create a utmp (or utmpx) entry when a pseudo-tty is
                   allocated.  By default, the new entry will be a copy of the
                   user's existing utmp entry (if any), with the tty, time,
                   type and pid fields updated.

               utmp_user=string
                   User name to use when constructing a new utmp (or utmpx)
                   entry when _s_e_t___u_t_m_p is enabled.  This option can be used to
                   set the user field in the utmp entry to the user the
                   command runs as rather than the invoking user.  If not set,
                   ssuuddoo will base the new entry on the invoking user's
                   existing entry.

               Unsupported values will be ignored.

           argv_out
               The NULL-terminated argument vector to pass to the _e_x_e_c_v_e_(_)
               system call when executing the command.  The plugin is
               responsible for allocating and populating the vector.

           user_env_out
               The NULL-terminated environment vector to use when executing
               the command.  The plugin is responsible for allocating and
               populating the vector.

       list
            int (*list)(int verbose, const char *list_user,
                        int argc, char * const argv[]);

           List available privileges for the invoking user.  Returns 1 on
           success, 0 on failure and -1 on error.  On error, the plugin may
           optionally call the conversation or plugin_printf function with
           SUDO_CONF_ERROR_MSG to present additional error information to the
           user.

           Privileges should be output via the conversation or plugin_printf
           function using SUDO_CONV_INFO_MSG.

           verbose
               Flag indicating whether to list in verbose mode or not.

           list_user
               The name of a different user to list privileges for if the
               policy allows it.  If NULL, the plugin should list the
               privileges of the invoking user.

           argc
               The number of elements in _a_r_g_v, not counting the final NULL
               pointer.

           argv
               If non-NULL, an argument vector describing a command the user
               wishes to check against the policy in the same form as what
               would be passed to the _e_x_e_c_v_e_(_) system call.  If the command is
               permitted by the policy, the fully-qualified path to the
               command should be displayed along with any command line
               arguments.

       validate
            int (*validate)(void);

           The validate function is called when ssuuddoo is run with the -v flag.
           For policy plugins such as _s_u_d_o_e_r_s that cache authentication
           credentials, this function will validate and cache the credentials.

           The validate function should be NULL if the plugin does not support
           credential caching.

           Returns 1 on success, 0 on failure and -1 on error.  On error, the
           plugin may optionally call the conversation or plugin_printf
           function with SUDO_CONF_ERROR_MSG to present additional error
           information to the user.

       invalidate
            void (*invalidate)(int remove);

           The invalidate function is called when ssuuddoo is called with the -k
           or -K flag.  For policy plugins such as _s_u_d_o_e_r_s that cache
           authentication credentials, this function will invalidate the
           credentials.  If the _r_e_m_o_v_e flag is set, the plugin may remove the
           credentials instead of simply invalidating them.

           The invalidate function should be NULL if the plugin does not
           support credential caching.

       init_session
            int (*init_session)(struct passwd *pwd);

           The init_session function is called when ssuuddoo sets up the execution
           environment for the command, immediately before the contents of the
           _c_o_m_m_a_n_d___i_n_f_o list are applied (before the uid changes).  This can
           be used to do session setup that is not supported by _c_o_m_m_a_n_d___i_n_f_o,
           such as opening the PAM session.

           The _p_w_d argument points to a passwd struct for the user the command
           will be run as if the uid the command will run as was found in the
           password database, otherwise it will be NULL.

           Returns 1 on success, 0 on failure and -1 on error.  On error, the
           plugin may optionally call the conversation or plugin_printf
           function with SUDO_CONF_ERROR_MSG to present additional error
           information to the user.

       _V_e_r_s_i_o_n _m_a_c_r_o_s

        #define SUDO_API_VERSION_GET_MAJOR(v) ((v) >> 16)
        #define SUDO_API_VERSION_GET_MINOR(v) ((v) & 0xffff)
        #define SUDO_API_VERSION_SET_MAJOR(vp, n) do { \
            *(vp) = (*(vp) & 0x0000ffff) | ((n) << 16); \
        } while(0)
        #define SUDO_VERSION_SET_MINOR(vp, n) do { \
            *(vp) = (*(vp) & 0xffff0000) | (n); \
        } while(0)

        #define SUDO_API_VERSION_MAJOR 1
        #define SUDO_API_VERSION_MINOR 0
        #define SUDO_API_VERSION ((SUDO_API_VERSION_MAJOR << 16) | \
                                  SUDO_API_VERSION_MINOR)

   II//OO PPlluuggiinn AAPPII
        struct io_plugin {
        #define SUDO_IO_PLUGIN         2
            unsigned int type; /* always SUDO_IO_PLUGIN */
            unsigned int version; /* always SUDO_API_VERSION */
            int (*open)(unsigned int version, sudo_conv_t conversation
                        sudo_printf_t plugin_printf, char * const settings[],
                        char * const user_info[], int argc, char * const argv[],
                        char * const user_env[]);
            void (*close)(int exit_status, int error); /* wait status or error */
            int (*show_version)(int verbose);
            int (*log_ttyin)(const char *buf, unsigned int len);
            int (*log_ttyout)(const char *buf, unsigned int len);
            int (*log_stdin)(const char *buf, unsigned int len);
            int (*log_stdout)(const char *buf, unsigned int len);
            int (*log_stderr)(const char *buf, unsigned int len);
        };

       When an I/O plugin is loaded, ssuuddoo runs the command in a pseudo-tty.
       This makes it possible to log the input and output from the user's
       session.  If any of the standard input, standard output or standard
       error do not correspond to a tty, ssuuddoo will open a pipe to capture the
       I/O for logging before passing it on.

       The log_ttyin function receives the raw user input from the terminal
       device (note that this will include input even when echo is disabled,
       such as when a password is read). The log_ttyout function receives
       output from the pseudo-tty that is suitable for replaying the user's
       session at a later time.  The log_stdin, log_stdout and log_stderr
       functions are only called if the standard input, standard output or
       standard error respectively correspond to something other than a tty.

       Any of the logging functions may be set to the NULL pointer if no
       logging is to be performed.  If the open function returns 0, no I/O
       will be sent to the plugin.

       The io_plugin struct has the following fields:

       type
           The type field should always be set to SUDO_IO_PLUGIN

       version
           The version field should be set to SUDO_API_VERSION.

           This allows ssuuddoo to determine the API version the plugin was built
           against.

       open
            int (*open)(unsigned int version, sudo_conv_t conversation
                        sudo_printf_t plugin_printf, char * const settings[],
                        char * const user_info[], int argc, char * const argv[],
                        char * const user_env[]);

           The _o_p_e_n function is run before the _l_o_g___i_n_p_u_t, _l_o_g___o_u_t_p_u_t or
           _s_h_o_w___v_e_r_s_i_o_n functions are called.  It is only called if the
           version is being requested or the _c_h_e_c_k___p_o_l_i_c_y function has
           returned successfully.  It returns 1 on success, 0 on failure, -1
           if a general error occurred, or -2 if there was a usage error.  In
           the latter case, ssuuddoo will print a usage message before it exits.
           If an error occurs, the plugin may optionally call the conversation
           or plugin_printf function with SUDO_CONF_ERROR_MSG to present
           additional error information to the user.

           The function arguments are as follows:

           version
               The version passed in by ssuuddoo allows the plugin to determine
               the major and minor version number of the plugin API supported
               by ssuuddoo.

           conversation
               A pointer to the conversation function that may be used by the
               _s_h_o_w___v_e_r_s_i_o_n function to display version information (see
               show_version below).  The conversation function may also be
               used to display additional error message to the user.  The
               conversation function returns 0 on success and -1 on failure.

           plugin_printf
               A pointer to a printf-style function that may be used by the
               _s_h_o_w___v_e_r_s_i_o_n function to display version information (see
               show_version below).  The plugin_printf function may also be
               used to display additional error message to the user.  The
               plugin_printf function returns number of characters printed on
               success and -1 on failure.

           settings
               A vector of user-supplied ssuuddoo settings in the form of
               "name=value" strings.  The vector is terminated by a NULL
               pointer.  These settings correspond to flags the user specified
               when running ssuuddoo.  As such, they will only be present when the
               corresponding flag has been specified on the command line.

               When parsing _s_e_t_t_i_n_g_s, the plugin should split on the ffiirrsstt
               equal sign ('=') since the _n_a_m_e field will never include one
               itself but the _v_a_l_u_e might.

               See the "Policy Plugin API" section for a list of all possible
               settings.

           user_info
               A vector of information about the user running the command in
               the form of "name=value" strings.  The vector is terminated by
               a NULL pointer.

               When parsing _u_s_e_r___i_n_f_o, the plugin should split on the ffiirrsstt
               equal sign ('=') since the _n_a_m_e field will never include one
               itself but the _v_a_l_u_e might.

               See the "Policy Plugin API" section for a list of all possible
               strings.

           argc
               The number of elements in _a_r_g_v, not counting the final NULL
               pointer.

           argv
               If non-NULL, an argument vector describing a command the user
               wishes to run in the same form as what would be passed to the
               _e_x_e_c_v_e_(_) system call.

           user_env
               The user's environment in the form of a NULL-terminated vector
               of "name=value" strings.

               When parsing _u_s_e_r___e_n_v, the plugin should split on the ffiirrsstt
               equal sign ('=') since the _n_a_m_e field will never include one
               itself but the _v_a_l_u_e might.

       close
            void (*close)(int exit_status, int error);

           The close function is called when the command being run by ssuuddoo
           finishes.

           The function arguments are as follows:

           exit_status
               The command's exit status, as returned by the _w_a_i_t(2) system
               call.  The value of exit_status is undefined if error is non-
               zero.

           error
               If the command could not be executed, this is set to the value
               of errno set by the _e_x_e_c_v_e(2) system call.  If the command was
               successfully executed, the value of error is 0.

       show_version
            int (*show_version)(int verbose);

           The show_version function is called by ssuuddoo when the user specifies
           the -V option.  The plugin may display its version information to
           the user via the conversation or plugin_printf function using
           SUDO_CONV_INFO_MSG.  If the user requests detailed version
           information, the verbose flag will be set.

       log_ttyin
            int (*log_ttyin)(const char *buf, unsigned int len);

           The _l_o_g___t_t_y_i_n function is called whenever data can be read from the
           user but before it is passed to the running command.  This allows
           the plugin to reject data if it chooses to (for instance if the
           input contains banned content).  Returns 1 if the data should be
           passed to the command, 0 if the data is rejected (which will
           terminate the command) or -1 if an error occurred.

           The function arguments are as follows:

           buf The buffer containing user input.

           len The length of _b_u_f in bytes.

       log_ttyout
            int (*log_ttyout)(const char *buf, unsigned int len);

           The _l_o_g___t_t_y_o_u_t function is called whenever data can be read from
           the command but before it is written to the user's terminal.  This
           allows the plugin to reject data if it chooses to (for instance if
           the output contains banned content).  Returns 1 if the data should
           be passed to the user, 0 if the data is rejected (which will
           terminate the command) or -1 if an error occurred.

           The function arguments are as follows:

           buf The buffer containing command output.

           len The length of _b_u_f in bytes.

       log_stdin
            int (*log_stdin)(const char *buf, unsigned int len);

           The _l_o_g___s_t_d_i_n function is only used if the standard input does not
           correspond to a tty device.  It is called whenever data can be read
           from the standard input but before it is passed to the running
           command.  This allows the plugin to reject data if it chooses to
           (for instance if the input contains banned content).  Returns 1 if
           the data should be passed to the command, 0 if the data is rejected
           (which will terminate the command) or -1 if an error occurred.

           The function arguments are as follows:

           buf The buffer containing user input.

           len The length of _b_u_f in bytes.

       log_stdout
            int (*log_stdout)(const char *buf, unsigned int len);

           The _l_o_g___s_t_d_o_u_t function is only used if the standard output does
           not correspond to a tty device.  It is called whenever data can be
           read from the command but before it is written to the standard
           output.  This allows the plugin to reject data if it chooses to
           (for instance if the output contains banned content).  Returns 1 if
           the data should be passed to the user, 0 if the data is rejected
           (which will terminate the command) or -1 if an error occurred.

           The function arguments are as follows:

           buf The buffer containing command output.

           len The length of _b_u_f in bytes.

       log_stderr
            int (*log_stderr)(const char *buf, unsigned int len);

           The _l_o_g___s_t_d_e_r_r function is only used if the standard error does not
           correspond to a tty device.  It is called whenever data can be read
           from the command but before it is written to the standard error.
           This allows the plugin to reject data if it chooses to (for
           instance if the output contains banned content).  Returns 1 if the
           data should be passed to the user, 0 if the data is rejected (which
           will terminate the command) or -1 if an error occurred.

           The function arguments are as follows:

           buf The buffer containing command output.

           len The length of _b_u_f in bytes.

       _V_e_r_s_i_o_n _m_a_c_r_o_s

       Same as for the "Policy Plugin API".

   CCoonnvveerrssaattiioonn AAPPII
       If the plugin needs to interact with the user, it may do so via the
       conversation function.  A plugin should not attempt to read directly
       from the standard input or the user's tty (neither of which are
       guaranteed to exist).  The caller must include a trailing newline in
       msg if one is to be printed.

       A printf-style function is also available that can be used to display
       informational or error messages to the user, which is usually more
       convenient for simple messages where no use input is required.

        struct sudo_conv_message {
        #define SUDO_CONV_PROMPT_ECHO_OFF  0x0001 /* do not echo user input */
        #define SUDO_CONV_PROMPT_ECHO_ON   0x0002 /* echo user input */
        #define SUDO_CONV_ERROR_MSG        0x0003 /* error message */
        #define SUDO_CONV_INFO_MSG         0x0004 /* informational message */
        #define SUDO_CONV_PROMPT_MASK      0x0005 /* mask user input */
        #define SUDO_CONV_PROMPT_ECHO_OK   0x1000 /* flag: allow echo if no tty */
            int msg_type;
            int timeout;
            const char *msg;
        };

        struct sudo_conv_reply {
            char *reply;
        };

        typedef int (*sudo_conv_t)(int num_msgs,
                     const struct sudo_conv_message msgs[],
                     struct sudo_conv_reply replies[]);

        typedef int (*sudo_printf_t)(int msg_type, const char *fmt, ...);

       Pointers to the conversation and printf-style functions are passed in
       to the plugin's open function when the plugin is initialized.

       To use the conversation function, the plugin must pass an array of
       sudo_conv_message and sudo_conv_reply structures.  There must be a
       struct sudo_conv_message and struct sudo_conv_reply for each message in
       the conversation.  The plugin is responsible for freeing the reply
       buffer filled in to the struct sudo_conv_reply, if any.

       The printf-style function uses the same underlying mechanism as the
       conversation function but only supports SUDO_CONV_INFO_MSG and
       SUDO_CONV_ERROR_MSG for the _m_s_g___t_y_p_e parameter.  It can be more
       convenient than using the conversation function if no user reply is
       needed and supports standard _p_r_i_n_t_f_(_) escape sequences.

       See the sample plugin for an example of the conversation function
       usage.

   SSuuddooeerrss GGrroouupp PPlluuggiinn AAPPII
       The _s_u_d_o_e_r_s module supports a plugin interface to allow non-Unix group
       lookups.  This can be used to query a group source other than the
       standard Unix group database.  A sample group plugin is bundled with
       ssuuddoo that implements file-based lookups.  Third party group plugins
       include a QAS AD plugin available from Quest Software.

       A group plugin must declare and populate a sudoers_group_plugin struct
       in the global scope.  This structure contains pointers to the functions
       that implement plugin initialization, cleanup and group lookup.

        struct sudoers_group_plugin {
           unsigned int version;
           int (*init)(int version, sudo_printf_t sudo_printf,
                       char *const argv[]);
           void (*cleanup)(void);
           int (*query)(const char *user, const char *group,
                        const struct passwd *pwd);
       };

       The sudoers_group_plugin struct has the following fields:

       version
           The version field should be set to GROUP_API_VERSION.

           This allows _s_u_d_o_e_r_s to determine the API version the group plugin
           was built against.

       init
            int (*init)(int version, sudo_printf_t plugin_printf,
                        char *const argv[]);

           The _i_n_i_t function is called after _s_u_d_o_e_r_s has been parsed but
           before any policy checks.  It returns 1 on success, 0 on failure
           (or if the plugin is not configured), and -1 if a error occurred.
           If an error occurs, the plugin may call the plugin_printf function
           with SUDO_CONF_ERROR_MSG to present additional error information to
           the user.

           The function arguments are as follows:

           version
               The version passed in by _s_u_d_o_e_r_s allows the plugin to determine
               the major and minor version number of the group plugin API
               supported by _s_u_d_o_e_r_s.

           plugin_printf
               A pointer to a printf-style function that may be used to
               display informational or error message to the user.  Returns
               the number of characters printed on success and -1 on failure.

           argv
               A NULL-terminated array of arguments generated from the
               _g_r_o_u_p___p_l_u_g_i_n option in _s_u_d_o_e_r_s.  If no arguments were given,
               _a_r_g_v will be NULL.

       cleanup
            void (*cleanup)();

           The _c_l_e_a_n_u_p function is called when _s_u_d_o_e_r_s has finished its group
           checks.  The plugin should free any memory it has allocated and
           close open file handles.

       query
            int (*query)(const char *user, const char *group,
                         const struct passwd *pwd);

           The _q_u_e_r_y function is used to ask the group plugin whether _u_s_e_r is
           a member of _g_r_o_u_p.

           The function arguments are as follows:

           user
               The name of the user being looked up in the external group
               database.

           group
               The name of the group being queried.

           pwd The password database entry for _u_s_e_r, if any.  If _u_s_e_r is not
               present in the password database, _p_w_d will be NULL.

       _V_e_r_s_i_o_n _M_a_c_r_o_s

        /* Sudoers group plugin version major/minor */
        #define GROUP_API_VERSION_MAJOR 1
        #define GROUP_API_VERSION_MINOR 0
        #define GROUP_API_VERSION ((GROUP_API_VERSION_MAJOR << 16) | \
                                   GROUP_API_VERSION_MINOR)

        /* Getters and setters for group version */
        #define GROUP_API_VERSION_GET_MAJOR(v) ((v) >> 16)
        #define GROUP_API_VERSION_GET_MINOR(v) ((v) & 0xffff)
        #define GROUP_API_VERSION_SET_MAJOR(vp, n) do { \
            *(vp) = (*(vp) & 0x0000ffff) | ((n) << 16); \
        } while(0)
        #define GROUP_API_VERSION_SET_MINOR(vp, n) do { \
            *(vp) = (*(vp) & 0xffff0000) | (n); \
        } while(0)

SSEEEE AALLSSOO
       _s_u_d_o_e_r_s(4), _s_u_d_o(1m)

BBUUGGSS
       If you feel you have found a bug in ssuuddoo, please submit a bug report at
       http://www.sudo.ws/sudo/bugs/

SSUUPPPPOORRTT
       Limited free support is available via the sudo-workers mailing list,
       see http://www.sudo.ws/mailman/listinfo/sudo-workers to subscribe or
       search the archives.

DDIISSCCLLAAIIMMEERR
       ssuuddoo is provided ``AS IS'' and any express or implied warranties,
       including, but not limited to, the implied warranties of
       merchantability and fitness for a particular purpose are disclaimed.
       See the LICENSE file distributed with ssuuddoo or
       http://www.sudo.ws/sudo/license.html for complete details.



1.8.3                         September 16, 2011               SUDO_PLUGIN(1m)
